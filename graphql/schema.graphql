"A datetime string with format Y-m-d H:i:s, e.g. 2018-05-23 13:43:32."
scalar DateTime @scalar(class: "App\\GraphQL\\Scalars\\DateTime")

"Indicates what fields are available at the top level of a query operation."
type Query {
    "Find a single user by an identifying attribute."
    user(
      "Search by primary key."
      id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

      "Search by email address."
      email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    "List multiple users."
    users(
      "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
      name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10)

    events: [Event!]! @all(model: "App\\Models\\Event")
}

type User {
  id: ID!
  name: String!
  email: String!
  role: String!
  created_at: DateTime!
}

type AuthPayload {
  user: User!
  token: String!
}

type ResetPasswordResponse {
  status: String!
  message: String!
}

type Event {
  id: ID!
  title: String!
  description: String
  date: DateTime!
  location: String
  created_at: DateTime!
  updated_at: DateTime!
}

type Mutation {
  registerUser(name: String!, email: String!, password: String!, role: String): AuthPayload 
    @field(resolver: "App\\GraphQL\\Mutations\\AuthResolver@register")

  loginUser(email: String!, password: String!): AuthPayload 
    @field(resolver: "App\\GraphQL\\Mutations\\AuthResolver@login")

  changePassword(
    currentPassword: String!,
    newPassword: String!
  ): Boolean
    @guard(with: ["sanctum"])
    @field(resolver: "App\\GraphQL\\Mutations\\ChangePasswordResolver")

  createEvent(
    title: String!
    description: String
    date: DateTime!
    location: String
  ): Event 
    @guard(with: ["sanctum"]) 
    @field(resolver: "App\\GraphQL\\Mutations\\EventMutation@createEvent")

  deleteEvent(id: ID!): Boolean 
    @guard(with: ["sanctum"])
    @field(resolver: "App\\GraphQL\\Mutations\\EventMutation@deleteEvent")

  
}




